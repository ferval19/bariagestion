{"remainingRequest":"/Users/fernandofernandezvalero/Developer/server/bariagestion/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/fernandofernandezvalero/Developer/server/bariagestion/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/fernandofernandezvalero/Developer/server/bariagestion/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/fernandofernandezvalero/Developer/server/bariagestion/src/components/Footer.vue?vue&type=template&id=40ab164b&","dependencies":[{"path":"/Users/fernandofernandezvalero/Developer/server/bariagestion/src/components/Footer.vue","mtime":1582976282941},{"path":"/Users/fernandofernandezvalero/Developer/server/bariagestion/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/fernandofernandezvalero/Developer/server/bariagestion/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/fernandofernandezvalero/Developer/server/bariagestion/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/fernandofernandezvalero/Developer/server/bariagestion/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}