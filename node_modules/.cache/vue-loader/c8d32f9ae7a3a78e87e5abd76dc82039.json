{"remainingRequest":"/Users/fernandofernandezvalero/Developer/server/bariagestion/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/fernandofernandezvalero/Developer/server/bariagestion/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/fernandofernandezvalero/Developer/server/bariagestion/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/fernandofernandezvalero/Developer/server/bariagestion/src/components/Navbar.vue?vue&type=template&id=41458b80&","dependencies":[{"path":"/Users/fernandofernandezvalero/Developer/server/bariagestion/src/components/Navbar.vue","mtime":1582976273142},{"path":"/Users/fernandofernandezvalero/Developer/server/bariagestion/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/fernandofernandezvalero/Developer/server/bariagestion/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/fernandofernandezvalero/Developer/server/bariagestion/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/fernandofernandezvalero/Developer/server/bariagestion/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}