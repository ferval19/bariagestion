{"remainingRequest":"/Users/fernandofernandezvalero/Developer/server/bariagestion/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/fernandofernandezvalero/Developer/server/bariagestion/src/views/Landing.vue?vue&type=template&id=c3bf2ea0&","dependencies":[{"path":"/Users/fernandofernandezvalero/Developer/server/bariagestion/src/views/Landing.vue","mtime":1582231957790},{"path":"/Users/fernandofernandezvalero/Developer/server/bariagestion/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/fernandofernandezvalero/Developer/server/bariagestion/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/fernandofernandezvalero/Developer/server/bariagestion/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/fernandofernandezvalero/Developer/server/bariagestion/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxkaXY+CiAgPG5hdmJhci1jb21wb25lbnQ+PC9uYXZiYXItY29tcG9uZW50PgogIDxtYWluPgogICAgPGRpdgogICAgICBjbGFzcz0icmVsYXRpdmUgcHQtMTYgcGItMzIgZmxleCBjb250ZW50LWNlbnRlciBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXIiCiAgICAgIHN0eWxlPSJtaW4taGVpZ2h0OiA3NXZoOyIKICAgID4KICAgICAgPGRpdgogICAgICAgIGNsYXNzPSJhYnNvbHV0ZSB0b3AtMCB3LWZ1bGwgaC1mdWxsIGJnLWNlbnRlciBiZy1jb3ZlciIKICAgICAgICBzdHlsZT0iYmFja2dyb3VuZC1pbWFnZTogdXJsKGh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9waG90by0xNDk2OTAyNTI2NTE3LWMwZjJjYjhmZGI2YT9peGxpYj1yYi0xLjIuMSZpeGlkPWV5SmhjSEJmYVdRaU9qRXlNRGQ5JmF1dG89Zm9ybWF0JmZpdD1jcm9wJnc9MTM1MCZxPTgwKSIKICAgICAgPgogICAgICAgIDxzcGFuIGlkPSJibGFja092ZXJsYXkiIGNsYXNzPSJ3LWZ1bGwgaC1mdWxsIGFic29sdXRlIG9wYWNpdHktNzUgYmctYmxhY2siPjwvc3Bhbj4KICAgICAgPC9kaXY+CiAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciByZWxhdGl2ZSBteC1hdXRvIj4KICAgICAgICA8ZGl2IGNsYXNzPSJpdGVtcy1jZW50ZXIgZmxleCBmbGV4LXdyYXAiPgogICAgICAgICAgPGRpdiBjbGFzcz0idy1mdWxsIGxnOnctNi8xMiBweC00IG1sLWF1dG8gbXItYXV0byB0ZXh0LWNlbnRlciI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByLTEyIj4KICAgICAgICAgICAgICA8aDEgY2xhc3M9InRleHQtd2hpdGUgZm9udC1zZW1pYm9sZCB0ZXh0LTV4bCI+RXN0YW1vcyBjZXJjYSBkZSB0w60uPC9oMT4KICAgICAgICAgICAgICA8cAogICAgICAgICAgICAgICAgY2xhc3M9Im10LTQgdGV4dC1sZyB0ZXh0LWdyYXktMzAwIgogICAgICAgICAgICAgID5TaSB0aWVuZXMgYWxnw7puIHRpcG8gZGUgZHVkYSBwYXJhIGdlc3Rpb25hciB0dXMgdHJhbWl0ZXMgY29uIGxhIGFkbWluc3RyYWNpw7NuLCBCYXJpYSBHZXN0acOzbiBlcyB0dSBzaXRpbyBkZSBjb25maWFuemEsIG9mcmVjaWVuZG8gdW4gdHJhdG8gcGVyc29uYWxpemFkbywgYXPDrSBjb21vIHNvbHVjaW9uZXMgcsOhcGlkYXMgeSDDoWdpbGVzIHBhcmEgdHVzIHRyYW1pdGVzLjwvcD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICAgIDxkaXYKICAgICAgICBjbGFzcz0idG9wLWF1dG8gYm90dG9tLTAgbGVmdC0wIHJpZ2h0LTAgdy1mdWxsIGFic29sdXRlIHBvaW50ZXItZXZlbnRzLW5vbmUgb3ZlcmZsb3ctaGlkZGVuIgogICAgICAgIHN0eWxlPSJoZWlnaHQ6IDcwcHg7IHRyYW5zZm9ybTogdHJhbnNsYXRlWigwcHgpOyIKICAgICAgPgogICAgICAgIDxzdmcKICAgICAgICAgIGNsYXNzPSJhYnNvbHV0ZSBib3R0b20tMCBvdmVyZmxvdy1oaWRkZW4iCiAgICAgICAgICB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciCiAgICAgICAgICBwcmVzZXJ2ZUFzcGVjdFJhdGlvPSJub25lIgogICAgICAgICAgdmVyc2lvbj0iMS4xIgogICAgICAgICAgdmlld0JveD0iMCAwIDI1NjAgMTAwIgogICAgICAgICAgeD0iMCIKICAgICAgICAgIHk9IjAiCiAgICAgICAgPgogICAgICAgICAgPHBvbHlnb24gY2xhc3M9InRleHQtZ3JheS0zMDAgZmlsbC1jdXJyZW50IiBwb2ludHM9IjI1NjAgMCAyNTYwIDEwMCAwIDEwMCIgLz4KICAgICAgICA8L3N2Zz4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICAgIDxzZWN0aW9uIGNsYXNzPSJwYi0yMCBiZy1ncmF5LTMwMCAtbXQtMjQiPgogICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIgbXgtYXV0byBweC00Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJmbGV4IGZsZXgtd3JhcCI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJsZzpwdC0xMiBwdC02IHctZnVsbCBtZDp3LTQvMTIgcHgtNCB0ZXh0LWNlbnRlciI+CiAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICBjbGFzcz0icmVsYXRpdmUgZmxleCBmbGV4LWNvbCBtaW4tdy0wIGJyZWFrLXdvcmRzIGJnLXdoaXRlIHctZnVsbCBtYi04IHNoYWRvdy1sZyByb3VuZGVkLWxnIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHgtNCBweS01IGZsZXgtYXV0byI+CiAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgIGNsYXNzPSJ0ZXh0LXdoaXRlIHAtMyB0ZXh0LWNlbnRlciBpbmxpbmUtZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXIgdy0xMiBoLTEyIG1iLTUgc2hhZG93LWxnIHJvdW5kZWQtZnVsbCBiZy1yZWQtODAwIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmFzIGZhLWF3YXJkIj48L2k+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxoNiBjbGFzcz0idGV4dC14bCBmb250LXNlbWlib2xkIj5GaXNjYWwgeSBjb250YWJsZTwvaDY+CiAgICAgICAgICAgICAgICA8cAogICAgICAgICAgICAgICAgICBjbGFzcz0ibXQtMiBtYi00IHRleHQtZ3JheS02MDAiCiAgICAgICAgICAgICAgICA+UmVhbGl6YW1vcyBkZWNsYXJhY2lvbmVzIGRlIElWQSwgSVJQRiwgaW1wdWVzdG8gZGUgc29jaWVkYWRlcyB5IGRlY2xhcmFjaW9uZXMgZGUgbGEgUmVudGEuIEFzw60gY29tbyB0b2RvIHRpcG8gZGUgdHJpYnV0YWNpb25lczogZXN0aW1hY2lvbiBkaXJlY3RhLCBkaXJlY3RhIHNpbXBsaWZpY2FkYSB1IG9iamV0aXZhLjwvcD4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDxkaXYgY2xhc3M9InctZnVsbCBtZDp3LTQvMTIgcHgtNCB0ZXh0LWNlbnRlciI+CiAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICBjbGFzcz0icmVsYXRpdmUgZmxleCBmbGV4LWNvbCBtaW4tdy0wIGJyZWFrLXdvcmRzIGJnLXdoaXRlIHctZnVsbCBtYi04IHNoYWRvdy1sZyByb3VuZGVkLWxnIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHgtNCBweS01IGZsZXgtYXV0byI+CiAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgIGNsYXNzPSJ0ZXh0LXdoaXRlIHAtMyB0ZXh0LWNlbnRlciBpbmxpbmUtZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXIgdy0xMiBoLTEyIG1iLTUgc2hhZG93LWxnIHJvdW5kZWQtZnVsbCBiZy1yZWQtODAwIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmFzIGZhLXJldHdlZXQiPjwvaT4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGg2IGNsYXNzPSJ0ZXh0LXhsIGZvbnQtc2VtaWJvbGQiPkxhYm9yYWw8L2g2PgogICAgICAgICAgICAgICAgPHAKICAgICAgICAgICAgICAgICAgY2xhc3M9Im10LTIgbWItNCB0ZXh0LWdyYXktNjAwIgogICAgICAgICAgICAgICAgPlBvZGVtb3MgYXNlc29yYXJ0ZSBlbiB0b2RvIGxvIHJlbGFjaW9uYWRvIGNvbiBub21pbmFzLCBjb250cmF0YWNpb25lcyB5IHNlZ3Vyb3Mgc29jaWFsZXMuIFJlcHJlc2VudGFjaW9uIGp1csOtZGljYSwgZGVzcGlkb3MsIHJlY2FsYW1hY2lvbmVzIGRlIGNhbnRpZGFkLCBwcm9jZWRpbWllbnRvcyBtb25pdG9yaW9zLi4uPC9wPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPGRpdiBjbGFzcz0icHQtNiB3LWZ1bGwgbWQ6dy00LzEyIHB4LTQgdGV4dC1jZW50ZXIiPgogICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgY2xhc3M9InJlbGF0aXZlIGZsZXggZmxleC1jb2wgbWluLXctMCBicmVhay13b3JkcyBiZy13aGl0ZSB3LWZ1bGwgbWItOCBzaGFkb3ctbGcgcm91bmRlZC1sZyIKICAgICAgICAgICAgPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9InB4LTQgcHktNSBmbGV4LWF1dG8iPgogICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICBjbGFzcz0idGV4dC13aGl0ZSBwLTMgdGV4dC1jZW50ZXIgaW5saW5lLWZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIHctMTIgaC0xMiBtYi01IHNoYWRvdy1sZyByb3VuZGVkLWZ1bGwgYmctcmVkLTgwMCIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhcyBmYS1maW5nZXJwcmludCI+PC9pPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8aDYgY2xhc3M9InRleHQteGwgZm9udC1zZW1pYm9sZCI+RXh0cmFuamVyw61hPC9oNj4KICAgICAgICAgICAgICAgIDxwCiAgICAgICAgICAgICAgICAgIGNsYXNzPSJtdC0yIG1iLTQgdGV4dC1ncmF5LTYwMCIKICAgICAgICAgICAgICAgID5PYnRlbmNpb24gZGUgcGVybWlzbyBkZSB0cmFiYWpvIHRhbnRvIHBvciBjdWVudGEgYWplbmEgY29tbyBwb3IgY3VlbnRhIHByb3BpYSwgcGVybWlzb3MgZGUgcmVzaWRlbmNpYSwgdHJhbWl0ZXMgY29uIGxhIG9maWNpbmEgZGUgZXh0cmFuamVyaWEuPC9wPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImZsZXggZmxleC13cmFwIGp1c3RpZnktY2VudGVyIj4KICAgICAgICAgIDxkaXYgY2xhc3M9ImxnOnB0LTEyIHB0LTYgdy1mdWxsIG1kOnctNC8xMiBweC00IHRleHQtY2VudGVyIj4KICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgIGNsYXNzPSJyZWxhdGl2ZSBmbGV4IGZsZXgtY29sIG1pbi13LTAgYnJlYWstd29yZHMgYmctd2hpdGUgdy1mdWxsIG1iLTggc2hhZG93LWxnIHJvdW5kZWQtbGciCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJweC00IHB5LTUgZmxleC1hdXRvIj4KICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgY2xhc3M9InRleHQtd2hpdGUgcC0zIHRleHQtY2VudGVyIGlubGluZS1mbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlciB3LTEyIGgtMTIgbWItNSBzaGFkb3ctbGcgcm91bmRlZC1mdWxsIGJnLXJlZC04MDAiCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYXMgZmEtYXdhcmQiPjwvaT4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGg2IGNsYXNzPSJ0ZXh0LXhsIGZvbnQtc2VtaWJvbGQiPlRyw6FmaWNvPC9oNj4KICAgICAgICAgICAgICAgIDxwCiAgICAgICAgICAgICAgICAgIGNsYXNzPSJtdC0yIG1iLTQgdGV4dC1ncmF5LTYwMCIKICAgICAgICAgICAgICAgID5Ob3MgZW5jYXJnYW1vcyBkZSBsYXMgYWx0YXMgbyBiYWphcywgYXNpIGNvbW8gZGUgbGFzIHRyYW5zbWlzaW9uZXMgZGUgdmVow61jdWxvcy48L3A+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJ3LWZ1bGwgbWQ6dy00LzEyIHB4LTQgdGV4dC1jZW50ZXIiPgogICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgY2xhc3M9InJlbGF0aXZlIGZsZXggZmxleC1jb2wgbWluLXctMCBicmVhay13b3JkcyBiZy13aGl0ZSB3LWZ1bGwgbWItOCBzaGFkb3ctbGcgcm91bmRlZC1sZyIKICAgICAgICAgICAgPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9InB4LTQgcHktNSBmbGV4LWF1dG8iPgogICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICBjbGFzcz0idGV4dC13aGl0ZSBwLTMgdGV4dC1jZW50ZXIgaW5saW5lLWZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIHctMTIgaC0xMiBtYi01IHNoYWRvdy1sZyByb3VuZGVkLWZ1bGwgYmctcmVkLTgwMCIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhcyBmYS1yZXR3ZWV0Ij48L2k+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxoNiBjbGFzcz0idGV4dC14bCBmb250LXNlbWlib2xkIj5DYXRhc3RybzwvaDY+CiAgICAgICAgICAgICAgICA8cAogICAgICAgICAgICAgICAgICBjbGFzcz0ibXQtMiBtYi00IHRleHQtZ3JheS02MDAiCiAgICAgICAgICAgICAgICA+SW1wdWVzdG8gZGUgc3VjZXNpb25lcywgZG9uYWNpb25lcyB5IGFjdG9zIGp1csOtZGljb3MgZG9jdW1lbnRhZG9zLiBUcmFtaXRhY2lvbmVzIGRlbCByZXNnaXN0cm8gZGUgbGEgcHJvcGllZGFkIGNvbW8gZGUgbm90YXJpYSByZWdpc3RyYWwuPC9wPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgIDwvc2VjdGlvbj4KICAgIDxzZWN0aW9uIGNsYXNzPSJyZWxhdGl2ZSBweS0yMCI+CiAgICAgIDxkaXYKICAgICAgICBjbGFzcz0iYm90dG9tLWF1dG8gdG9wLTAgbGVmdC0wIHJpZ2h0LTAgdy1mdWxsIGFic29sdXRlIHBvaW50ZXItZXZlbnRzLW5vbmUgb3ZlcmZsb3ctaGlkZGVuIC1tdC0yMCIKICAgICAgICBzdHlsZT0iaGVpZ2h0OiA4MHB4OyB0cmFuc2Zvcm06IHRyYW5zbGF0ZVooMHB4KTsiCiAgICAgID4KICAgICAgICA8c3ZnCiAgICAgICAgICBjbGFzcz0iYWJzb2x1dGUgYm90dG9tLTAgb3ZlcmZsb3ctaGlkZGVuIgogICAgICAgICAgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIgogICAgICAgICAgcHJlc2VydmVBc3BlY3RSYXRpbz0ibm9uZSIKICAgICAgICAgIHZlcnNpb249IjEuMSIKICAgICAgICAgIHZpZXdCb3g9IjAgMCAyNTYwIDEwMCIKICAgICAgICAgIHg9IjAiCiAgICAgICAgICB5PSIwIgogICAgICAgID4KICAgICAgICAgIDxwb2x5Z29uIGNsYXNzPSJ0ZXh0LXdoaXRlIGZpbGwtY3VycmVudCIgcG9pbnRzPSIyNTYwIDAgMjU2MCAxMDAgMCAxMDAiIC8+CiAgICAgICAgPC9zdmc+CiAgICAgIDwvZGl2PgogICAgICA8ZGl2IGNsYXNzPSJmbGV4IGZsZXgtd3JhcCBpdGVtcy1jZW50ZXIgbXQtMzIiPgogICAgICAgIDxkaXYgY2xhc3M9InctZnVsbCBtZDp3LTUvMTIgcHgtNCBtci1hdXRvIG1sLWF1dG8iPgogICAgICAgICAgPGltZwogICAgICAgICAgICBjbGFzcz0idy01NiIKICAgICAgICAgICAgc3JjPSJodHRwczovL3d3dy5ubmVzcGFuYS5lcy9TdHlsZSUyMExpYnJhcnkvVW1icmVsbGEvYXNzZXRzL2ltYWdlcy9sb2dvLnBuZyIKICAgICAgICAgICAgYWx0PSJOYXRpb25hbCBOZWRlcmxhbmRlbiIKICAgICAgICAgIC8+CgogICAgICAgICAgPGgzIGNsYXNzPSJ0ZXh0LTN4bCBtYi0yIGZvbnQtc2VtaWJvbGQgbGVhZGluZy1ub3JtYWwiPkFzZXNvcmFtaWVudG8gZmluYW5jaWVybzwvaDM+CiAgICAgICAgICA8cCBjbGFzcz0idGV4dC1sZyBmb250LWxpZ2h0IGxlYWRpbmctcmVsYXhlZCBtdC00IG1iLTQgdGV4dC1ncmF5LTcwMCI+CiAgICAgICAgICAgIEluY29ycG9yYW1vcyBhIG51ZXN0cmEgY2FydGVyYSBkZSBwcm9kdWN0b3MgbGEgZ2VzdGlvbiBkZSBhY3Rpdm9zIGZpbmFjaWVyb3MgYSB0cmF2w6lzCiAgICAgICAgICAgIGRlIHVuYSBkZSBsYXMgbWF5b3JlcyBlbXByZXNhcyBhIG5pdmVsIGludGVybmFjaW9uYWwsIE5hdGlvbmFsIE5lZGVybGFuZGVuLgogICAgICAgICAgPC9wPgogICAgICAgICAgPHAgY2xhc3M9InRleHQtbGcgZm9udC1saWdodCBsZWFkaW5nLXJlbGF4ZWQgbXQtMCBtYi00IHRleHQtZ3JheS03MDAiPgogICAgICAgICAgICBQb3IgbWVkaW8gZGUgc3UgY2FydGVyYSBkZSBwcm9kdWN0b3MgcG9kcsOhcyBhY2NlZGVyIGEgdW5hIGdyYW4gY2FudGlkYWQgZGUgcHJvZHVjdG9zOiBkZXNkZQogICAgICAgICAgICBwcmVzdGFtb3MgaGlwb3RpY2FyaW9zIGhhc3RhIGZvbmRvcyBkZSBpbnZlcnNpb24gcmVudGFibGVzLgogICAgICAgICAgPC9wPgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9InctZnVsbCBtZDp3LTQvMTIgcHgtNCBtci1hdXRvIG1sLWF1dG8iPgogICAgICAgICAgPGRpdgogICAgICAgICAgICBjbGFzcz0icmVsYXRpdmUgZmxleCBmbGV4LWNvbCBtaW4tdy0wIGJyZWFrLXdvcmRzIGJnLXdoaXRlIHctZnVsbCBtYi02IHNoYWRvdy1sZyByb3VuZGVkLWxnIGJnLW9yYW5nZS02MDAiCiAgICAgICAgICA+CiAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICBhbHQ9Ii4uLiIKICAgICAgICAgICAgICBzcmM9Imh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9waG90by0xNTIyMjAyMTc2OTg4LTY2MjczYzJmZDU1Zj9peGxpYj1yYi0xLjIuMSZhbXA7aXhpZD1leUpoY0hCZmFXUWlPakV5TURkOSZhbXA7YXV0bz1mb3JtYXQmYW1wO2ZpdD1jcm9wJmFtcDt3PTEwNTEmYW1wO3E9ODAiCiAgICAgICAgICAgICAgY2xhc3M9InctZnVsbCBhbGlnbi1taWRkbGUgcm91bmRlZC10LWxnIgogICAgICAgICAgICAvPgogICAgICAgICAgICA8YmxvY2txdW90ZSBjbGFzcz0icmVsYXRpdmUgcC04IG1iLTQiPgogICAgICAgICAgICAgIDxzdmcKICAgICAgICAgICAgICAgIHByZXNlcnZlQXNwZWN0UmF0aW89Im5vbmUiCiAgICAgICAgICAgICAgICB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciCiAgICAgICAgICAgICAgICB2aWV3Qm94PSIwIDAgNTgzIDk1IgogICAgICAgICAgICAgICAgY2xhc3M9ImFic29sdXRlIGxlZnQtMCB3LWZ1bGwgYmxvY2siCiAgICAgICAgICAgICAgICBzdHlsZT0iaGVpZ2h0OiA5NXB4OyB0b3A6IC05NHB4OyIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8cG9seWdvbiBwb2ludHM9Ii0zMCw5NSA1ODMsOTUgNTgzLDY1IiBjbGFzcz0idGV4dC1vcmFuZ2UtNjAwIGZpbGwtY3VycmVudCIgLz4KICAgICAgICAgICAgICA8L3N2Zz4KICAgICAgICAgICAgICA8aDQgY2xhc3M9InRleHQteGwgZm9udC1ib2xkIHRleHQtd2hpdGUiPk5hdGlvbmFsIE5lZGVybGFuZGVuPC9oND4KICAgICAgICAgICAgICA8cAogICAgICAgICAgICAgICAgY2xhc3M9InRleHQtbWQgZm9udC1saWdodCBtdC0yIHRleHQtd2hpdGUiCiAgICAgICAgICAgICAgPk5hdGlvbmFsZS1OZWRlcmxhbmRlbiBvZnJlY2UgZGlmZXJlbnRlcyBzZWd1cm9zIHkgc29sdWNpb25lcyBkZSBhaG9ycm8gZSBpbnZlcnNpw7NuIGEgbWVkaW8geSBsYXJnbyBwbGF6byBhIG3DoXMgZGUgbWVkaW8gbWlsbMOzbiBkZSBjbGllbnRlcyBlbiB0b2RhIEVzcGHDsWEuPC9wPgogICAgICAgICAgICA8L2Jsb2NrcXVvdGU+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICA8L3NlY3Rpb24+CiAgICA8c2VjdGlvbiBjbGFzcz0icHQtMjAgcGItNDgiPgogICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIgbXgtYXV0byBweC00Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJmbGV4IGZsZXgtd3JhcCBqdXN0aWZ5LWNlbnRlciB0ZXh0LWNlbnRlciBtYi0yNCI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJ3LWZ1bGwgbGc6dy02LzEyIHB4LTQiPgogICAgICAgICAgICA8aDIgY2xhc3M9InRleHQtNHhsIGZvbnQtc2VtaWJvbGQiPkhlcmUgYXJlIG91ciBoZXJvZXM8L2gyPgogICAgICAgICAgICA8cCBjbGFzcz0idGV4dC1sZyBsZWFkaW5nLXJlbGF4ZWQgbS00IHRleHQtZ3JheS02MDAiPgogICAgICAgICAgICAgIEFjY29yZGluZyB0byB0aGUgTmF0aW9uYWwgT2NlYW5pYyBhbmQgQXRtb3NwaGVyaWMKICAgICAgICAgICAgICBBZG1pbmlzdHJhdGlvbiwgVGVkLCBTY2FtYm9zLCBOU0lEQ2xlYWQgc2NlbnRpc3QsIHB1dHMgdGhlCiAgICAgICAgICAgICAgcG90ZW50aWFsbHkgcmVjb3JkIG1heGltdW0uCiAgICAgICAgICAgIDwvcD4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImZsZXggZmxleC13cmFwIj4KICAgICAgICAgIDxkaXYgY2xhc3M9InctZnVsbCBtZDp3LTYvMTIgbGc6dy0zLzEyIGxnOm1iLTAgbWItMTIgcHgtNCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InB4LTYiPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9InB0LTYgdGV4dC1jZW50ZXIiPgogICAgICAgICAgICAgICAgPGg1IGNsYXNzPSJ0ZXh0LXhsIGZvbnQtYm9sZCI+TG9yZW56byBDYXJtb25hIEFsb25zbzwvaDU+CiAgICAgICAgICAgICAgICA8cAogICAgICAgICAgICAgICAgICBjbGFzcz0ibXQtMSB0ZXh0LXNtIHRleHQtZ3JheS01MDAgdXBwZXJjYXNlIGZvbnQtc2VtaWJvbGQiCiAgICAgICAgICAgICAgICA+TGljZW5jaWFkbyBlbiBSZWxhY2lvbmVzIExhYm9yYWxlczwvcD4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im10LTYiPgogICAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJnLWJsdWUtNDAwIHRleHQtd2hpdGUgdy04IGgtOCByb3VuZGVkLWZ1bGwgb3V0bGluZS1ub25lIGZvY3VzOm91dGxpbmUtbm9uZSBtci0xIG1iLTEiCiAgICAgICAgICAgICAgICAgICAgdHlwZT0iYnV0dG9uIgogICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhYiBmYS10d2l0dGVyIj48L2k+CiAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJnLWJsdWUtNjAwIHRleHQtd2hpdGUgdy04IGgtOCByb3VuZGVkLWZ1bGwgb3V0bGluZS1ub25lIGZvY3VzOm91dGxpbmUtbm9uZSBtci0xIG1iLTEiCiAgICAgICAgICAgICAgICAgICAgdHlwZT0iYnV0dG9uIgogICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhYiBmYS1mYWNlYm9vay1mIj48L2k+CiAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJnLXBpbmstNTAwIHRleHQtd2hpdGUgdy04IGgtOCByb3VuZGVkLWZ1bGwgb3V0bGluZS1ub25lIGZvY3VzOm91dGxpbmUtbm9uZSBtci0xIG1iLTEiCiAgICAgICAgICAgICAgICAgICAgdHlwZT0iYnV0dG9uIgogICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhYiBmYS1kcmliYmJsZSI+PC9pPgogICAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgIDwvc2VjdGlvbj4KICAgIDxzZWN0aW9uIGNsYXNzPSJwYi0yMCByZWxhdGl2ZSBibG9jayBiZy1ncmF5LTkwMCI+CiAgICAgIDxkaXYKICAgICAgICBjbGFzcz0iYm90dG9tLWF1dG8gdG9wLTAgbGVmdC0wIHJpZ2h0LTAgdy1mdWxsIGFic29sdXRlIHBvaW50ZXItZXZlbnRzLW5vbmUgb3ZlcmZsb3ctaGlkZGVuIC1tdC0yMCIKICAgICAgICBzdHlsZT0iaGVpZ2h0OiA4MHB4OyB0cmFuc2Zvcm06IHRyYW5zbGF0ZVooMHB4KTsiCiAgICAgID4KICAgICAgICA8c3ZnCiAgICAgICAgICBjbGFzcz0iYWJzb2x1dGUgYm90dG9tLTAgb3ZlcmZsb3ctaGlkZGVuIgogICAgICAgICAgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIgogICAgICAgICAgcHJlc2VydmVBc3BlY3RSYXRpbz0ibm9uZSIKICAgICAgICAgIHZlcnNpb249IjEuMSIKICAgICAgICAgIHZpZXdCb3g9IjAgMCAyNTYwIDEwMCIKICAgICAgICAgIHg9IjAiCiAgICAgICAgICB5PSIwIgogICAgICAgID4KICAgICAgICAgIDxwb2x5Z29uIGNsYXNzPSJ0ZXh0LWdyYXktOTAwIGZpbGwtY3VycmVudCIgcG9pbnRzPSIyNTYwIDAgMjU2MCAxMDAgMCAxMDAiIC8+CiAgICAgICAgPC9zdmc+CiAgICAgIDwvZGl2PgogICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIgbXgtYXV0byBweC00IGxnOnB0LTI0IGxnOnBiLTY0Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJmbGV4IGZsZXgtd3JhcCB0ZXh0LWNlbnRlciBqdXN0aWZ5LWNlbnRlciI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJ3LWZ1bGwgbGc6dy02LzEyIHB4LTQiPgogICAgICAgICAgICA8aDIgY2xhc3M9InRleHQtNHhsIGZvbnQtc2VtaWJvbGQgdGV4dC13aGl0ZSI+QnVpbGQgc29tZXRoaW5nPC9oMj4KICAgICAgICAgICAgPHAgY2xhc3M9InRleHQtbGcgbGVhZGluZy1yZWxheGVkIG10LTQgbWItNCB0ZXh0LWdyYXktNTAwIj4KICAgICAgICAgICAgICBQdXQgdGhlIHBvdGVudGlhbGx5IHJlY29yZCBsb3cgbWF4aW11bSBzZWEgaWNlIGV4dGVudCB0aWhzIHllYXIKICAgICAgICAgICAgICBkb3duIHRvIGxvdyBpY2UuIEFjY29yZGluZyB0byB0aGUgTmF0aW9uYWwgT2NlYW5pYyBhbmQKICAgICAgICAgICAgICBBdG1vc3BoZXJpYyBBZG1pbmlzdHJhdGlvbiwgVGVkLCBTY2FtYm9zLgogICAgICAgICAgICA8L3A+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJmbGV4IGZsZXgtd3JhcCBtdC0xMiBqdXN0aWZ5LWNlbnRlciI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJ3LWZ1bGwgbGc6dy0zLzEyIHB4LTQgdGV4dC1jZW50ZXIiPgogICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgY2xhc3M9InRleHQtZ3JheS05MDAgcC0zIHctMTIgaC0xMiBzaGFkb3ctbGcgcm91bmRlZC1mdWxsIGJnLXdoaXRlIGlubGluZS1mbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlciIKICAgICAgICAgICAgPgogICAgICAgICAgICAgIDxpIGNsYXNzPSJmYXMgZmEtbWVkYWwgdGV4dC14bCI+PC9pPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGg2IGNsYXNzPSJ0ZXh0LXhsIG10LTUgZm9udC1zZW1pYm9sZCB0ZXh0LXdoaXRlIj5FeGNlbGVudCBTZXJ2aWNlczwvaDY+CiAgICAgICAgICAgIDxwIGNsYXNzPSJtdC0yIG1iLTQgdGV4dC1ncmF5LTUwMCI+CiAgICAgICAgICAgICAgU29tZSBxdWljayBleGFtcGxlIHRleHQgdG8gYnVpbGQgb24gdGhlIGNhcmQgdGl0bGUgYW5kIG1ha2UgdXAKICAgICAgICAgICAgICB0aGUgYnVsayBvZiB0aGUgY2FyZCdzIGNvbnRlbnQuCiAgICAgICAgICAgIDwvcD4KICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPGRpdiBjbGFzcz0idy1mdWxsIGxnOnctMy8xMiBweC00IHRleHQtY2VudGVyIj4KICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgIGNsYXNzPSJ0ZXh0LWdyYXktOTAwIHAtMyB3LTEyIGgtMTIgc2hhZG93LWxnIHJvdW5kZWQtZnVsbCBiZy13aGl0ZSBpbmxpbmUtZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXIiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8aSBjbGFzcz0iZmFzIGZhLXBvbGwgdGV4dC14bCI+PC9pPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGg1IGNsYXNzPSJ0ZXh0LXhsIG10LTUgZm9udC1zZW1pYm9sZCB0ZXh0LXdoaXRlIj5Hcm93IHlvdXIgbWFya2V0PC9oNT4KICAgICAgICAgICAgPHAgY2xhc3M9Im10LTIgbWItNCB0ZXh0LWdyYXktNTAwIj4KICAgICAgICAgICAgICBTb21lIHF1aWNrIGV4YW1wbGUgdGV4dCB0byBidWlsZCBvbiB0aGUgY2FyZCB0aXRsZSBhbmQgbWFrZSB1cAogICAgICAgICAgICAgIHRoZSBidWxrIG9mIHRoZSBjYXJkJ3MgY29udGVudC4KICAgICAgICAgICAgPC9wPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJ3LWZ1bGwgbGc6dy0zLzEyIHB4LTQgdGV4dC1jZW50ZXIiPgogICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgY2xhc3M9InRleHQtZ3JheS05MDAgcC0zIHctMTIgaC0xMiBzaGFkb3ctbGcgcm91bmRlZC1mdWxsIGJnLXdoaXRlIGlubGluZS1mbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlciIKICAgICAgICAgICAgPgogICAgICAgICAgICAgIDxpIGNsYXNzPSJmYXMgZmEtbGlnaHRidWxiIHRleHQteGwiPjwvaT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxoNSBjbGFzcz0idGV4dC14bCBtdC01IGZvbnQtc2VtaWJvbGQgdGV4dC13aGl0ZSI+TGF1bmNoIHRpbWU8L2g1PgogICAgICAgICAgICA8cCBjbGFzcz0ibXQtMiBtYi00IHRleHQtZ3JheS01MDAiPgogICAgICAgICAgICAgIFNvbWUgcXVpY2sgZXhhbXBsZSB0ZXh0IHRvIGJ1aWxkIG9uIHRoZSBjYXJkIHRpdGxlIGFuZCBtYWtlIHVwCiAgICAgICAgICAgICAgdGhlIGJ1bGsgb2YgdGhlIGNhcmQncyBjb250ZW50LgogICAgICAgICAgICA8L3A+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICA8L3NlY3Rpb24+CiAgICA8c2VjdGlvbiBjbGFzcz0icmVsYXRpdmUgYmxvY2sgcHktMjQgbGc6cHQtMCBiZy1ncmF5LTkwMCI+CiAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciBteC1hdXRvIHB4LTQiPgogICAgICAgIDxkaXYgY2xhc3M9ImZsZXggZmxleC13cmFwIGp1c3RpZnktY2VudGVyIGxnOi1tdC02NCAtbXQtNDgiPgogICAgICAgICAgPGRpdiBjbGFzcz0idy1mdWxsIGxnOnctNi8xMiBweC00Ij4KICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgIGNsYXNzPSJyZWxhdGl2ZSBmbGV4IGZsZXgtY29sIG1pbi13LTAgYnJlYWstd29yZHMgdy1mdWxsIG1iLTYgc2hhZG93LWxnIHJvdW5kZWQtbGcgYmctZ3JheS0zMDAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmbGV4LWF1dG8gcC01IGxnOnAtMTAiPgogICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJ0ZXh0LTJ4bCBmb250LXNlbWlib2xkIj7Cv1F1aWVyZXMgY29uc3VsdGFybm9zIGFsZ28/PC9oND4KICAgICAgICAgICAgICAgIDxwCiAgICAgICAgICAgICAgICAgIGNsYXNzPSJsZWFkaW5nLXJlbGF4ZWQgbXQtMSBtYi00IHRleHQtZ3JheS02MDAiCiAgICAgICAgICAgICAgICA+Q29tcGxldGEgZWwgZm9ybXVsYXJpbywgaW50ZW50YXJlbW9zIHBvbmVybm9zIGVuIGNvbnRhY3RvIGNvbnRpZ28gbG8gYW50ZXMgcG9zaWJsZS48L3A+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyZWxhdGl2ZSB3LWZ1bGwgbWItMyBtdC04Ij4KICAgICAgICAgICAgICAgICAgPGxhYmVsCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJsb2NrIHVwcGVyY2FzZSB0ZXh0LWdyYXktNzAwIHRleHQteHMgZm9udC1ib2xkIG1iLTIiCiAgICAgICAgICAgICAgICAgICAgZm9yPSJmdWxsLW5hbWUiCiAgICAgICAgICAgICAgICAgID5Ob21icmUgeSBBcGVsbGlkb3M8L2xhYmVsPgogICAgICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgICAgICB0eXBlPSJ0ZXh0IgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJweC0zIHB5LTMgcGxhY2Vob2xkZXItZ3JheS00MDAgdGV4dC1ncmF5LTcwMCBiZy13aGl0ZSByb3VuZGVkIHRleHQtc20gc2hhZG93IGZvY3VzOm91dGxpbmUtbm9uZSBmb2N1czpzaGFkb3ctb3V0bGluZSB3LWZ1bGwiCiAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IkZ1bGwgTmFtZSIKICAgICAgICAgICAgICAgICAgICBzdHlsZT0idHJhbnNpdGlvbjogYWxsIDAuMTVzIGVhc2UgMHM7IgogICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyZWxhdGl2ZSB3LWZ1bGwgbWItMyBtdC04Ij4KICAgICAgICAgICAgICAgICAgPGxhYmVsCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJsb2NrIHVwcGVyY2FzZSB0ZXh0LWdyYXktNzAwIHRleHQteHMgZm9udC1ib2xkIG1iLTIiCiAgICAgICAgICAgICAgICAgICAgZm9yPSJmdWxsLW5hbWUiCiAgICAgICAgICAgICAgICAgID5UZWzDqWZvbm88L2xhYmVsPgogICAgICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgICAgICB0eXBlPSJudW1iZXIiCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9InB4LTMgcHktMyBwbGFjZWhvbGRlci1ncmF5LTQwMCB0ZXh0LWdyYXktNzAwIGJnLXdoaXRlIHJvdW5kZWQgdGV4dC1zbSBzaGFkb3cgZm9jdXM6b3V0bGluZS1ub25lIGZvY3VzOnNoYWRvdy1vdXRsaW5lIHctZnVsbCIKICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iVGVsZWZvbm8iCiAgICAgICAgICAgICAgICAgICAgc3R5bGU9InRyYW5zaXRpb246IGFsbCAwLjE1cyBlYXNlIDBzOyIKICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icmVsYXRpdmUgdy1mdWxsIG1iLTMiPgogICAgICAgICAgICAgICAgICA8bGFiZWwKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYmxvY2sgdXBwZXJjYXNlIHRleHQtZ3JheS03MDAgdGV4dC14cyBmb250LWJvbGQgbWItMiIKICAgICAgICAgICAgICAgICAgICBmb3I9ImVtYWlsIgogICAgICAgICAgICAgICAgICA+RW1haWw8L2xhYmVsPgogICAgICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgICAgICB0eXBlPSJlbWFpbCIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0icHgtMyBweS0zIHBsYWNlaG9sZGVyLWdyYXktNDAwIHRleHQtZ3JheS03MDAgYmctd2hpdGUgcm91bmRlZCB0ZXh0LXNtIHNoYWRvdyBmb2N1czpvdXRsaW5lLW5vbmUgZm9jdXM6c2hhZG93LW91dGxpbmUgdy1mdWxsIgogICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSJFbWFpbCIKICAgICAgICAgICAgICAgICAgICBzdHlsZT0idHJhbnNpdGlvbjogYWxsIDAuMTVzIGVhc2UgMHM7IgogICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyZWxhdGl2ZSB3LWZ1bGwgbWItMyI+CiAgICAgICAgICAgICAgICAgIDxsYWJlbAogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJibG9jayB1cHBlcmNhc2UgdGV4dC1ncmF5LTcwMCB0ZXh0LXhzIGZvbnQtYm9sZCBtYi0yIgogICAgICAgICAgICAgICAgICAgIGZvcj0ibWVzc2FnZSIKICAgICAgICAgICAgICAgICAgPk1lbnNhamU8L2xhYmVsPgogICAgICAgICAgICAgICAgICA8dGV4dGFyZWEKICAgICAgICAgICAgICAgICAgICByb3dzPSI0IgogICAgICAgICAgICAgICAgICAgIGNvbHM9IjgwIgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJweC0zIHB5LTMgcGxhY2Vob2xkZXItZ3JheS00MDAgdGV4dC1ncmF5LTcwMCBiZy13aGl0ZSByb3VuZGVkIHRleHQtc20gc2hhZG93IGZvY3VzOm91dGxpbmUtbm9uZSBmb2N1czpzaGFkb3ctb3V0bGluZSB3LWZ1bGwiCiAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IkN1ZW50YW1lLi4uIgogICAgICAgICAgICAgICAgICA+PC90ZXh0YXJlYT4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGV4dC1jZW50ZXIgbXQtNiI+CiAgICAgICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYmctZ3JheS05MDAgdGV4dC13aGl0ZSBhY3RpdmU6YmctZ3JheS03MDAgdGV4dC1zbSBmb250LWJvbGQgdXBwZXJjYXNlIHB4LTYgcHktMyByb3VuZGVkIHNoYWRvdyBob3ZlcjpzaGFkb3ctbGcgb3V0bGluZS1ub25lIGZvY3VzOm91dGxpbmUtbm9uZSBtci0xIG1iLTEiCiAgICAgICAgICAgICAgICAgICAgdHlwZT0iYnV0dG9uIgogICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ0cmFuc2l0aW9uOiBhbGwgMC4xNXMgZWFzZSAwczsiCiAgICAgICAgICAgICAgICAgID5FbnZpYXIgTWVuc2FqZTwvYnV0dG9uPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgPC9zZWN0aW9uPgogIDwvbWFpbj4KICA8Zm9vdGVyLWNvbXBvbmVudD48L2Zvb3Rlci1jb21wb25lbnQ+CjwvZGl2Pgo="},null]}